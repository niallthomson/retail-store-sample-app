name: retail-sample
networks:
  default:
    name: retail-sample_default
services:
  cart:
    cap_add:
      - NET_BIND_SERVICE
    cap_drop:
      - all
    depends_on:
      carts-db:
        condition: service_healthy
        required: true
    environment:
      - SERVER_TOMCAT_ACCESSLOG_ENABLED=true
      - RETAIL_CART_PERSISTENCE_PROVIDER=dynamodb
      - RETAIL_CART_PERSISTENCE_DYNAMODB_ENDPOINT=http://carts-db:8000
      - RETAIL_CART_PERSISTENCE_DYNAMODB_CREATETABLE=true
      - AWS_ACCESS_KEY_ID=key
      - AWS_SECRET_ACCESS_KEY=dummy
    healthcheck:
      interval: 10s
      retries: 3
      start_period: 15s
      test:
        - CMD-SHELL
        - curl -f http://localhost:8080/actuator/health || exit 1
      timeout: 10s
    hostname: carts
    networks:
      default: null
    ports: []
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:rw,noexec,nosuid
    image: public.ecr.aws/aws-containers/retail-store-sample-cart:test1
  carts-db:
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    cap_drop:
      - all
    healthcheck:
      interval: 5s
      retries: 3
      test:
        - CMD-SHELL
        - exit 0
      timeout: 15s
    hostname: carts-db
    image: amazon/dynamodb-local:1.20.0
    networks:
      default: null
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:rw,noexec,nosuid
  catalog:
    cap_drop:
      - all
    depends_on:
      catalog-db:
        condition: service_started
        required: true
    environment:
      - GIN_MODE=release
      - reschedule=on-node-failure
      - RETAIL_CATALOG_PERSISTENCE_PROVIDER=mysql
      - RETAIL_CATALOG_PERSISTENCE_PASSWORD=${DB_PASSWORD}
      - RETAIL_CATALOG_PERSISTENCE_ENDPOINT=catalog-db:3306
    hostname: catalog
    networks:
      default: null
    ports: []
    restart: always
    security_opt:
      - no-new-privileges:true
    image: public.ecr.aws/aws-containers/retail-store-sample-catalog:test1
  catalog-db:
    environment:
      - reschedule=on-node-failure
      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
      - MYSQL_ALLOW_EMPTY_PASSWORD=true
      - MYSQL_DATABASE=catalogdb
      - MYSQL_USER=catalog_user
      - MYSQL_PASSWORD=${DB_PASSWORD}
    hostname: catalog-db
    image: mariadb:10.9
    networks:
      default: null
    restart: always
    security_opt:
      - no-new-privileges:true
  checkout:
    cap_add:
      - NET_BIND_SERVICE
    cap_drop:
      - all
    depends_on:
      checkout-redis:
        condition: service_healthy
        required: true
    environment:
      - RETAIL_CHECKOUT_PERSISTENCE_PROVIDER=redis
      - RETAIL_CHECKOUT_PERSISTENCE_REDIS_URL=redis://checkout-redis:6379
      - RETAIL_CHECKOUT_ENDPOINTS_ORDERS=http://orders:8080
    healthcheck:
      interval: 10s
      retries: 3
      test:
        - CMD-SHELL
        - curl -f http://localhost:8080/health || exit 1
      timeout: 10s
    hostname: checkout
    networks:
      default: null
    ports: []
    read_only: true
    restart: always
    tmpfs:
      - /tmp:rw,noexec,nosuid
    image: public.ecr.aws/aws-containers/retail-store-sample-checkout:test1
  checkout-redis:
    healthcheck:
      interval: 1s
      retries: 30
      test:
        - CMD
        - redis-cli
        - ping
      timeout: 3s
    hostname: checkout-redis
    image: redis:6.0-alpine
    networks:
      default: null
    ports: []
    restart: always
  orders:
    cap_add:
      - NET_BIND_SERVICE
    cap_drop:
      - all
    environment:
      - reschedule=on-node-failure
      - SERVER_TOMCAT_ACCESSLOG_ENABLED=true
      - RETAIL_ORDERS_MESSAGING_PROVIDER=rabbitmq
      - RETAIL_ORDERS_PERSISTENCE_PROVIDER=postgres
      - RETAIL_ORDERS_PERSISTENCE_ENDPOINT=orders-db:5432
      - RETAIL_ORDERS_PERSISTENCE_NAME=orders
      - RETAIL_ORDERS_PERSISTENCE_USERNAME=orders_user
      - RETAIL_ORDERS_PERSISTENCE_PASSWORD=${DB_PASSWORD}
      - RETAIL_ORDERS_MESSAGING_RABBITMQ_ADDRESSES=rabbitmq:5672
    healthcheck:
      interval: 10s
      retries: 3
      start_period: 15s
      test:
        - CMD-SHELL
        - curl -f http://localhost:8080/actuator/health || exit 1
      timeout: 10s
    hostname: orders
    networks:
      default: null
    ports: []
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:rw,noexec,nosuid
    image: public.ecr.aws/aws-containers/retail-store-sample-orders:test1
  orders-db:
    environment:
      - reschedule=on-node-failure
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=orders
      - POSTGRES_USER=orders_user
    healthcheck:
      interval: 10s
      retries: 30
      test:
        - CMD-SHELL
        - pg_isready -d orders -U orders_user
      timeout: 5s
    hostname: orders-db
    image: postgres:16.1
    networks:
      default: null
    ports: []
    restart: always
    security_opt:
      - no-new-privileges:true
  rabbitmq:
    hostname: rabbitmq
    image: rabbitmq:3-management
    networks:
      default: null
    ports: []
    restart: always
    security_opt:
      - no-new-privileges:true
  ui:
    cap_drop:
      - ALL
    environment:
      - JAVA_OPTS=-XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/urandom
      - SERVER_TOMCAT_ACCESSLOG_ENABLED=true
      - RETAIL_UI_ENDPOINTS_CATALOG=http://catalog:8080
      - RETAIL_UI_ENDPOINTS_CARTS=http://carts:8080
      - RETAIL_UI_ENDPOINTS_ORDERS=http://orders:8080
      - RETAIL_UI_ENDPOINTS_CHECKOUT=http://checkout:8080
    healthcheck:
      interval: 10s
      retries: 3
      start_period: 15s
      test:
        - CMD-SHELL
        - curl -f http://localhost:8080/actuator/health || exit 1
      timeout: 10s
    hostname: ui
    mem_limit: 512m
    networks:
      default: null
    ports:
      - mode: ingress
        protocol: tcp
        published: "8888"
        target: 8080
    restart: always
    image: public.ecr.aws/aws-containers/retail-store-sample-ui:test1
  waiter-carts:
    cap_drop:
      - all
    command: echo 'Ready'
    depends_on:
      cart:
        condition: service_healthy
        required: true
    image: busybox:1.33.0
    networks:
      default: null
    read_only: true
    restart: "no"
    security_opt:
      - no-new-privileges:true
  waiter-checkout:
    cap_drop:
      - all
    command: echo 'Ready'
    depends_on:
      checkout:
        condition: service_healthy
        required: true
    image: busybox:1.33.0
    networks:
      default: null
    restart: "no"
